try{self["workbox:core:7.2.0"]&&_()}catch{}const T=(s,...e)=>{let t=s;return e.length>0&&(t+=` :: ${JSON.stringify(e)}`),t},I=T;class l extends Error{constructor(e,t){const i=I(e,t);super(i),this.name=e,this.details=t}}const f={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:typeof registration<"u"?registration.scope:""},b=s=>[f.prefix,s,f.suffix].filter(e=>e&&e.length>0).join("-"),K=s=>{for(const e of Object.keys(f))s(e)},v={updateDetails:s=>{K(e=>{typeof s[e]=="string"&&(f[e]=s[e])})},getGoogleAnalyticsName:s=>s||b(f.googleAnalytics),getPrecacheName:s=>s||b(f.precache),getPrefix:()=>f.prefix,getRuntimeName:s=>s||b(f.runtime),getSuffix:()=>f.suffix};function k(s,e){const t=e();return s.waitUntil(t),t}try{self["workbox:precaching:7.2.0"]&&_()}catch{}const x="__WB_REVISION__";function O(s){if(!s)throw new l("add-to-cache-list-unexpected-type",{entry:s});if(typeof s=="string"){const a=new URL(s,location.href);return{cacheKey:a.href,url:a.href}}const{revision:e,url:t}=s;if(!t)throw new l("add-to-cache-list-unexpected-type",{entry:s});if(!e){const a=new URL(t,location.href);return{cacheKey:a.href,url:a.href}}const i=new URL(t,location.href),n=new URL(t,location.href);return i.searchParams.set(x,e),{cacheKey:i.href,url:n.href}}class j{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:e,state:t})=>{t&&(t.originalRequest=e)},this.cachedResponseWillBeUsed=async({event:e,state:t,cachedResponse:i})=>{if(e.type==="install"&&t&&t.originalRequest&&t.originalRequest instanceof Request){const n=t.originalRequest.url;i?this.notUpdatedURLs.push(n):this.updatedURLs.push(n)}return i}}}class S{constructor({precacheController:e}){this.cacheKeyWillBeUsed=async({request:t,params:i})=>{const n=(i==null?void 0:i.cacheKey)||this._precacheController.getCacheKeyForURL(t.url);return n?new Request(n,{headers:t.headers}):t},this._precacheController=e}}let p;function A(){if(p===void 0){const s=new Response("");if("body"in s)try{new Response(s.body),p=!0}catch{p=!1}p=!1}return p}async function M(s,e){let t=null;if(s.url&&(t=new URL(s.url).origin),t!==self.location.origin)throw new l("cross-origin-copy-response",{origin:t});const i=s.clone(),a={headers:new Headers(i.headers),status:i.status,statusText:i.statusText},o=A()?i.body:await i.blob();return new Response(o,a)}const D=s=>new URL(String(s),location.href).href.replace(new RegExp(`^${location.origin}`),"");function L(s,e){const t=new URL(s);for(const i of e)t.searchParams.delete(i);return t.href}async function W(s,e,t,i){const n=L(e.url,t);if(e.url===n)return s.match(e,i);const a=Object.assign(Object.assign({},i),{ignoreSearch:!0}),o=await s.keys(e,a);for(const c of o){const r=L(c.url,t);if(n===r)return s.match(c,i)}}class q{constructor(){this.promise=new Promise((e,t)=>{this.resolve=e,this.reject=t})}}const H=new Set;async function F(){for(const s of H)await s()}function B(s){return new Promise(e=>setTimeout(e,s))}try{self["workbox:strategies:7.2.0"]&&_()}catch{}function m(s){return typeof s=="string"?new Request(s):s}class ${constructor(e,t){this._cacheKeys={},Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new q,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const i of this._plugins)this._pluginStateMap.set(i,{});this.event.waitUntil(this._handlerDeferred.promise)}async fetch(e){const{event:t}=this;let i=m(e);if(i.mode==="navigate"&&t instanceof FetchEvent&&t.preloadResponse){const o=await t.preloadResponse;if(o)return o}const n=this.hasCallback("fetchDidFail")?i.clone():null;try{for(const o of this.iterateCallbacks("requestWillFetch"))i=await o({request:i.clone(),event:t})}catch(o){if(o instanceof Error)throw new l("plugin-error-request-will-fetch",{thrownErrorMessage:o.message})}const a=i.clone();try{let o;o=await fetch(i,i.mode==="navigate"?void 0:this._strategy.fetchOptions);for(const c of this.iterateCallbacks("fetchDidSucceed"))o=await c({event:t,request:a,response:o});return o}catch(o){throw n&&await this.runCallbacks("fetchDidFail",{error:o,event:t,originalRequest:n.clone(),request:a.clone()}),o}}async fetchAndCachePut(e){const t=await this.fetch(e),i=t.clone();return this.waitUntil(this.cachePut(e,i)),t}async cacheMatch(e){const t=m(e);let i;const{cacheName:n,matchOptions:a}=this._strategy,o=await this.getCacheKey(t,"read"),c=Object.assign(Object.assign({},a),{cacheName:n});i=await caches.match(o,c);for(const r of this.iterateCallbacks("cachedResponseWillBeUsed"))i=await r({cacheName:n,matchOptions:a,cachedResponse:i,request:o,event:this.event})||void 0;return i}async cachePut(e,t){const i=m(e);await B(0);const n=await this.getCacheKey(i,"write");if(!t)throw new l("cache-put-with-no-response",{url:D(n.url)});const a=await this._ensureResponseSafeToCache(t);if(!a)return!1;const{cacheName:o,matchOptions:c}=this._strategy,r=await self.caches.open(o),h=this.hasCallback("cacheDidUpdate"),g=h?await W(r,n.clone(),["__WB_REVISION__"],c):null;try{await r.put(n,h?a.clone():a)}catch(u){if(u instanceof Error)throw u.name==="QuotaExceededError"&&await F(),u}for(const u of this.iterateCallbacks("cacheDidUpdate"))await u({cacheName:o,oldResponse:g,newResponse:a.clone(),request:n,event:this.event});return!0}async getCacheKey(e,t){const i=`${e.url} | ${t}`;if(!this._cacheKeys[i]){let n=e;for(const a of this.iterateCallbacks("cacheKeyWillBeUsed"))n=m(await a({mode:t,request:n,event:this.event,params:this.params}));this._cacheKeys[i]=n}return this._cacheKeys[i]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const i of this.iterateCallbacks(e))await i(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if(typeof t[e]=="function"){const i=this._pluginStateMap.get(t);yield a=>{const o=Object.assign(Object.assign({},a),{state:i});return t[e](o)}}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve(null)}async _ensureResponseSafeToCache(e){let t=e,i=!1;for(const n of this.iterateCallbacks("cacheWillUpdate"))if(t=await n({request:this.request,response:t,event:this.event})||void 0,i=!0,!t)break;return i||t&&t.status!==200&&(t=void 0),t}}class V{constructor(e={}){this.cacheName=v.getRuntimeName(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,i=typeof e.request=="string"?new Request(e.request):e.request,n="params"in e?e.params:void 0,a=new $(this,{event:t,request:i,params:n}),o=this._getResponse(a,i,t),c=this._awaitComplete(o,a,i,t);return[o,c]}async _getResponse(e,t,i){await e.runCallbacks("handlerWillStart",{event:i,request:t});let n;try{if(n=await this._handle(t,e),!n||n.type==="error")throw new l("no-response",{url:t.url})}catch(a){if(a instanceof Error){for(const o of e.iterateCallbacks("handlerDidError"))if(n=await o({error:a,event:i,request:t}),n)break}if(!n)throw a}for(const a of e.iterateCallbacks("handlerWillRespond"))n=await a({event:i,request:t,response:n});return n}async _awaitComplete(e,t,i,n){let a,o;try{a=await e}catch{}try{await t.runCallbacks("handlerDidRespond",{event:n,request:i,response:a}),await t.doneWaiting()}catch(c){c instanceof Error&&(o=c)}if(await t.runCallbacks("handlerDidComplete",{event:n,request:i,response:a,error:o}),t.destroy(),o)throw o}}class d extends V{constructor(e={}){e.cacheName=v.getPrecacheName(e.cacheName),super(e),this._fallbackToNetwork=e.fallbackToNetwork!==!1,this.plugins.push(d.copyRedirectedCacheableResponsesPlugin)}async _handle(e,t){const i=await t.cacheMatch(e);return i||(t.event&&t.event.type==="install"?await this._handleInstall(e,t):await this._handleFetch(e,t))}async _handleFetch(e,t){let i;const n=t.params||{};if(this._fallbackToNetwork){const a=n.integrity,o=e.integrity,c=!o||o===a;i=await t.fetch(new Request(e,{integrity:e.mode!=="no-cors"?o||a:void 0})),a&&c&&e.mode!=="no-cors"&&(this._useDefaultCacheabilityPluginIfNeeded(),await t.cachePut(e,i.clone()))}else throw new l("missing-precache-entry",{cacheName:this.cacheName,url:e.url});return i}async _handleInstall(e,t){this._useDefaultCacheabilityPluginIfNeeded();const i=await t.fetch(e);if(!await t.cachePut(e,i.clone()))throw new l("bad-precaching-response",{url:e.url,status:i.status});return i}_useDefaultCacheabilityPluginIfNeeded(){let e=null,t=0;for(const[i,n]of this.plugins.entries())n!==d.copyRedirectedCacheableResponsesPlugin&&(n===d.defaultPrecacheCacheabilityPlugin&&(e=i),n.cacheWillUpdate&&t++);t===0?this.plugins.push(d.defaultPrecacheCacheabilityPlugin):t>1&&e!==null&&this.plugins.splice(e,1)}}d.defaultPrecacheCacheabilityPlugin={async cacheWillUpdate({response:s}){return!s||s.status>=400?null:s}};d.copyRedirectedCacheableResponsesPlugin={async cacheWillUpdate({response:s}){return s.redirected?await M(s):s}};class G{constructor({cacheName:e,plugins:t=[],fallbackToNetwork:i=!0}={}){this._urlsToCacheKeys=new Map,this._urlsToCacheModes=new Map,this._cacheKeysToIntegrities=new Map,this._strategy=new d({cacheName:v.getPrecacheName(e),plugins:[...t,new S({precacheController:this})],fallbackToNetwork:i}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this._strategy}precache(e){this.addToCacheList(e),this._installAndActiveListenersAdded||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this._installAndActiveListenersAdded=!0)}addToCacheList(e){const t=[];for(const i of e){typeof i=="string"?t.push(i):i&&i.revision===void 0&&t.push(i.url);const{cacheKey:n,url:a}=O(i),o=typeof i!="string"&&i.revision?"reload":"default";if(this._urlsToCacheKeys.has(a)&&this._urlsToCacheKeys.get(a)!==n)throw new l("add-to-cache-list-conflicting-entries",{firstEntry:this._urlsToCacheKeys.get(a),secondEntry:n});if(typeof i!="string"&&i.integrity){if(this._cacheKeysToIntegrities.has(n)&&this._cacheKeysToIntegrities.get(n)!==i.integrity)throw new l("add-to-cache-list-conflicting-integrities",{url:a});this._cacheKeysToIntegrities.set(n,i.integrity)}if(this._urlsToCacheKeys.set(a,n),this._urlsToCacheModes.set(a,o),t.length>0){const c=`Workbox is precaching URLs without revision info: ${t.join(", ")}
This is generally NOT safe. Learn more at https://bit.ly/wb-precache`;console.warn(c)}}}install(e){return k(e,async()=>{const t=new j;this.strategy.plugins.push(t);for(const[a,o]of this._urlsToCacheKeys){const c=this._cacheKeysToIntegrities.get(o),r=this._urlsToCacheModes.get(a),h=new Request(a,{integrity:c,cache:r,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:o},request:h,event:e}))}const{updatedURLs:i,notUpdatedURLs:n}=t;return{updatedURLs:i,notUpdatedURLs:n}})}activate(e){return k(e,async()=>{const t=await self.caches.open(this.strategy.cacheName),i=await t.keys(),n=new Set(this._urlsToCacheKeys.values()),a=[];for(const o of i)n.has(o.url)||(await t.delete(o),a.push(o.url));return{deletedURLs:a}})}getURLsToCacheKeys(){return this._urlsToCacheKeys}getCachedURLs(){return[...this._urlsToCacheKeys.keys()]}getCacheKeyForURL(e){const t=new URL(e,location.href);return this._urlsToCacheKeys.get(t.href)}getIntegrityForCacheKey(e){return this._cacheKeysToIntegrities.get(e)}async matchPrecache(e){const t=e instanceof Request?e.url:e,i=this.getCacheKeyForURL(t);if(i)return(await self.caches.open(this.strategy.cacheName)).match(i)}createHandlerBoundToURL(e){const t=this.getCacheKeyForURL(e);if(!t)throw new l("non-precached-url",{url:e});return i=>(i.request=new Request(e),i.params=Object.assign({cacheKey:t},i.params),this.strategy.handle(i))}}let C;const P=()=>(C||(C=new G),C);try{self["workbox:routing:7.2.0"]&&_()}catch{}const E="GET",R=s=>s&&typeof s=="object"?s:{handle:s};class w{constructor(e,t,i=E){this.handler=R(t),this.match=e,this.method=i}setCatchHandler(e){this.catchHandler=R(e)}}class z extends w{constructor(e,t,i){const n=({url:a})=>{const o=e.exec(a.href);if(o&&!(a.origin!==location.origin&&o.index!==0))return o.slice(1)};super(n,t,i)}}class J{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",e=>{const{request:t}=e,i=this.handleRequest({request:t,event:e});i&&e.respondWith(i)})}addCacheListener(){self.addEventListener("message",e=>{if(e.data&&e.data.type==="CACHE_URLS"){const{payload:t}=e.data,i=Promise.all(t.urlsToCache.map(n=>{typeof n=="string"&&(n=[n]);const a=new Request(...n);return this.handleRequest({request:a,event:e})}));e.waitUntil(i),e.ports&&e.ports[0]&&i.then(()=>e.ports[0].postMessage(!0))}})}handleRequest({request:e,event:t}){const i=new URL(e.url,location.href);if(!i.protocol.startsWith("http"))return;const n=i.origin===location.origin,{params:a,route:o}=this.findMatchingRoute({event:t,request:e,sameOrigin:n,url:i});let c=o&&o.handler;const r=e.method;if(!c&&this._defaultHandlerMap.has(r)&&(c=this._defaultHandlerMap.get(r)),!c)return;let h;try{h=c.handle({url:i,request:e,event:t,params:a})}catch(u){h=Promise.reject(u)}const g=o&&o.catchHandler;return h instanceof Promise&&(this._catchHandler||g)&&(h=h.catch(async u=>{if(g)try{return await g.handle({url:i,request:e,event:t,params:a})}catch(U){U instanceof Error&&(u=U)}if(this._catchHandler)return this._catchHandler.handle({url:i,request:e,event:t});throw u})),h}findMatchingRoute({url:e,sameOrigin:t,request:i,event:n}){const a=this._routes.get(i.method)||[];for(const o of a){let c;const r=o.match({url:e,sameOrigin:t,request:i,event:n});if(r)return c=r,(Array.isArray(c)&&c.length===0||r.constructor===Object&&Object.keys(r).length===0||typeof r=="boolean")&&(c=void 0),{route:o,params:c}}return{}}setDefaultHandler(e,t=E){this._defaultHandlerMap.set(t,R(e))}setCatchHandler(e){this._catchHandler=R(e)}registerRoute(e){this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new l("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(t>-1)this._routes.get(e.method).splice(t,1);else throw new l("unregister-route-route-not-registered")}}let y;const Q=()=>(y||(y=new J,y.addFetchListener(),y.addCacheListener()),y);function Z(s,e,t){let i;if(typeof s=="string"){const a=new URL(s,location.href),o=({url:c})=>c.href===a.href;i=new w(o,e,t)}else if(s instanceof RegExp)i=new z(s,e,t);else if(typeof s=="function")i=new w(s,e,t);else if(s instanceof w)i=s;else throw new l("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});return Q().registerRoute(i),i}function X(s,e=[]){for(const t of[...s.searchParams.keys()])e.some(i=>i.test(t))&&s.searchParams.delete(t);return s}function*Y(s,{ignoreURLParametersMatching:e=[/^utm_/,/^fbclid$/],directoryIndex:t="index.html",cleanURLs:i=!0,urlManipulation:n}={}){const a=new URL(s,location.href);a.hash="",yield a.href;const o=X(a,e);if(yield o.href,t&&o.pathname.endsWith("/")){const c=new URL(o.href);c.pathname+=t,yield c.href}if(i){const c=new URL(o.href);c.pathname+=".html",yield c.href}if(n){const c=n({url:a});for(const r of c)yield r.href}}class ee extends w{constructor(e,t){const i=({request:n})=>{const a=e.getURLsToCacheKeys();for(const o of Y(n.url,t)){const c=a.get(o);if(c){const r=e.getIntegrityForCacheKey(c);return{cacheKey:c,integrity:r}}}};super(i,e.strategy)}}function te(s){const e=P(),t=new ee(e,s);Z(t)}function se(s){P().precache(s)}function ie(s,e){se(s),te(e)}ie([{"revision":"eb2c5620f44982dacd27dcb33fd3543d","url":"404.html"},{"revision":null,"url":"assets/app-v4-1760899745229-BH1cIbCa.js"},{"revision":null,"url":"assets/asset-v4-1760899745229-Bq-DyqPN.css"},{"revision":null,"url":"assets/asset-v4-1760899745229-HlSc4AQf.css"},{"revision":null,"url":"assets/chunk-v4-1760899745229-1Nf2UfTp.js"},{"revision":null,"url":"assets/chunk-v4-1760899745229-BEMVMY4e.js"},{"revision":null,"url":"assets/chunk-v4-1760899745229-BeVBjNwn.js"},{"revision":null,"url":"assets/chunk-v4-1760899745229-BTLJ37H-.js"},{"revision":null,"url":"assets/chunk-v4-1760899745229-BX32o4Tt.js"},{"revision":null,"url":"assets/chunk-v4-1760899745229-BxVygLwE.js"},{"revision":null,"url":"assets/chunk-v4-1760899745229-C91sa_mq.js"},{"revision":null,"url":"assets/chunk-v4-1760899745229-CaAz7H5M.js"},{"revision":null,"url":"assets/chunk-v4-1760899745229-CMUnjaUB.js"},{"revision":null,"url":"assets/chunk-v4-1760899745229-COCLPCaB.js"},{"revision":null,"url":"assets/chunk-v4-1760899745229-Cp1U2DWw.js"},{"revision":null,"url":"assets/chunk-v4-1760899745229-Da1keFKk.js"},{"revision":null,"url":"assets/chunk-v4-1760899745229-DBZTXvvv.js"},{"revision":null,"url":"assets/chunk-v4-1760899745229-DO-YtAxd.js"},{"revision":null,"url":"assets/chunk-v4-1760899745229-Dq2jMYX_.js"},{"revision":null,"url":"assets/chunk-v4-1760899745229-iU7ReY_7.js"},{"revision":"bbfd59a087f6ce7550ba70d081b1e15c","url":"index.html"},{"revision":"20c520fda7c8cdda7ffa04b1375ffe5b","url":"registerSW.js"},{"revision":"f71820346837bc5a613727355ba7ad5c","url":"assets/icon.png"},{"revision":"7e520bbd89e977436fa0a81a320f197e","url":"assets/logo.png"},{"revision":"159b4a152d5b1991c794d0bd853b8ec0","url":"manifest.webmanifest"}]);const ae="bd-evidencija-v1",ne="BD Evidencija";self.addEventListener("install",s=>{console.log("📱 Service Worker installing..."),self.skipWaiting()});self.addEventListener("activate",s=>{console.log("📱 Service Worker activating..."),s.waitUntil(clients.claim())});self.addEventListener("message",s=>{if(console.log("📩 Service Worker received message:",s.data),s.data&&s.data.type==="SHOW_NOTIFICATION"){const{payload:e}=s.data;self.registration.showNotification(e.title||"BD Evidencija",{body:e.body||"Nova obavest!",icon:e.icon||"/bde-evidencija/icon-192x192.png",badge:e.badge||"/bde-evidencija/badge-96x96.png",data:e.data||{url:"/"},actions:e.actions||[],requireInteraction:e.requireInteraction||!1,tag:e.tag||"manual",vibrate:[200,100,200]}),console.log("✅ Manual notification shown via message")}if(s.data&&s.data.type==="SIMULATE_PUSH"){const{payload:e}=s.data,t=new Event("push");t.data={json:()=>({title:e.title,body:e.body,icon:e.icon,data:e.data})},self.registration.showNotification(e.title||"BD Evidencija",{body:e.body||"Simulacija push-a!",icon:e.icon||"/bde-evidencija/icon-192x192.png",badge:"/bde-evidencija/badge-96x96.png",data:e.data||{url:"/"},tag:"push-simulation",vibrate:[200,100,200]}),console.log("✅ Push simulation notification shown")}if(s.data&&s.data.type==="SIMULATE_CROSS_DEVICE_PUSH"){const{payload:e,targetEndpoint:t}=s.data;console.log(`📱 Simulating cross-device push to: ${t.substring(0,50)}...`),self.registration.showNotification(e.title||"BD Evidencija",{body:`${e.body} (simulacija za sve vozače)`,icon:e.icon||"/bde-evidencija/icon-192x192.png",badge:"/bde-evidencija/badge-96x96.png",data:e.data||{url:"/"},tag:"cross-device-simulation",vibrate:[300,200,300],requireInteraction:!1}),console.log("✅ Cross-device push simulation shown")}});self.addEventListener("push",s=>{var e,t,i,n;if(console.log("📨 Push notification received:",s),!s.data){console.log("No push data received");return}try{const a=s.data.json();console.log("📱 Push data:",a);const o={body:a.body||"Nova obavest!",icon:a.icon||"./assets/icon.png",badge:a.badge||"./assets/favicon.png",image:a.image,data:{url:((e=a.data)==null?void 0:e.url)||"/",type:((t=a.data)==null?void 0:t.type)||"general",timestamp:Date.now(),...a.data},actions:oe((i=a.data)==null?void 0:i.type),tag:a.tag||((n=a.data)==null?void 0:n.type)||"general",renotify:a.renotify||!1,requireInteraction:a.requireInteraction||!1,silent:a.silent||!1,vibrate:a.vibrate||[200,100,200],dir:"ltr",lang:"sr"};s.waitUntil(self.registration.showNotification(a.title||ne,o))}catch(a){console.error("❌ Error processing push notification:",a),s.waitUntil(self.registration.showNotification("BD Evidencija",{body:"Nova obavest je stigla!",icon:"/icon-192x192.png",data:{url:"/"}}))}});self.addEventListener("notificationclick",s=>{console.log("🖱️ Notification clicked:",s);const e=s.notification,t=s.action,i=e.data||{};if(e.close(),t==="dismiss"){console.log("📱 Notification dismissed");return}let n="/";t==="view"||!t?n=i.url||N(i.type):t==="quick_reply"&&(n=ce(i)),console.log("🔗 Opening URL:",n),re(i),s.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then(a=>{for(const o of a)if(o.url.includes(self.location.origin))return o.focus().then(()=>"navigate"in o?o.navigate(n):o.postMessage({type:"NAVIGATE",url:n,notificationData:i}));return clients.openWindow(self.location.origin+n)}).catch(a=>(console.error("❌ Error opening window:",a),clients.openWindow(self.location.origin))))});self.addEventListener("notificationclose",s=>{console.log("📱 Notification closed:",s.notification.data);const e=s.notification.data||{};le(e)});function oe(s){const e=[{action:"view",title:"👀 Pogledaj",icon:"/icons/view.png"},{action:"dismiss",title:"❌ Zatvori",icon:"/icons/close.png"}];switch(s){case"statistics":return[{action:"view",title:"📊 Pogledaj statistike",icon:"/icons/stats.png"},...e.slice(1)];case"achievement":return[{action:"view",title:"🏆 Pogledaj postignuće",icon:"/icons/trophy.png"},...e.slice(1)];case"payroll":return[{action:"view",title:"💰 Otvori platnu listu",icon:"/icons/money.png"},...e.slice(1)];case"extra_ride":return[{action:"view",title:"🚗 Pregledaj vožnju",icon:"/icons/car.png"},{action:"quick_reply",title:"✅ Brzo odobri",icon:"/icons/approve.png"},...e.slice(1)];default:return e}}function N(s){switch(s){case"statistics":return"/statistics";case"achievement":return"/achievements";case"payroll":return"/payroll";case"extra_ride":return"/admin/rides";case"system":return"/admin";default:return"/"}}function ce(s){return s.type==="extra_ride"&&s.rideId?`/admin/rides?approve=${s.rideId}`:N(s.type)}function re(s){try{fetch("/api/analytics/notification-click",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({type:s.type,timestamp:Date.now(),url:s.url,notificationId:s.notificationId})}).catch(e=>{console.log("📊 Analytics logging failed:",e)})}catch(e){console.log("📊 Click logging error:",e)}}function le(s){try{fetch("/api/analytics/notification-dismiss",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({type:s.type,timestamp:Date.now(),notificationId:s.notificationId})}).catch(e=>{console.log("📊 Dismiss logging failed:",e)})}catch(e){console.log("📊 Dismiss logging error:",e)}}self.addEventListener("sync",s=>{console.log("🔄 Background sync:",s.tag),s.tag==="notification-actions"&&s.waitUntil(he())});async function he(){try{const s=await caches.open(ae),e=await s.match("/offline-actions");if(e){const t=await e.json();for(const i of t)await ue(i);await s.delete("/offline-actions")}}catch(s){console.error("❌ Error processing offline actions:",s)}}async function ue(s){try{const e=await fetch(s.url,{method:s.method||"POST",headers:s.headers||{"Content-Type":"application/json"},body:JSON.stringify(s.data)});console.log("✅ Offline action processed:",s.type)}catch(e){console.error("❌ Failed to process offline action:",e)}}self.addEventListener("message",s=>{console.log("💬 Message from app:",s.data),s.data.type==="SKIP_WAITING"?self.skipWaiting():s.data.type==="GET_VERSION"&&s.ports[0].postMessage({version:"1.0.0"})});
